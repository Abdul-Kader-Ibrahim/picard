package picard.sam.SamErrorMetric;

import htsjdk.samtools.reference.SamLocusAndReferenceIterator;
import htsjdk.samtools.util.SamLocusIterator;
import htsjdk.samtools.util.SequenceUtil;

/**
 * A calculator that estimates the error rate of the bases it observes for indels only.
 * Created by jonn on 6/13/19.
 */
public class IndelErrorCalculator extends BaseErrorCalculator {

    // TODO: This class should be treated as a stub.  It is incomplete!

    //==================================================================================================================
    // Public Static Members:

    //==================================================================================================================
    // Private Static Members:

    //==================================================================================================================
    // Private Members:

    protected long nMismatchingBases;

    //==================================================================================================================
    // Constructors:

    //==================================================================================================================
    // Override Methods:

    /**
     * The function by which new loci are "shown" to the calculator
     **/
    @Override
    public void addBase(final SamLocusIterator.RecordAndOffset recordAndOffset, final SamLocusAndReferenceIterator.SAMLocusAndReference locusAndRef) {
        super.addBase(recordAndOffset, locusAndRef);
        final byte readBase = recordAndOffset.getReadBase();
        if (!SequenceUtil.isNoCall(readBase) && (readBase != locusAndRef.getReferenceBase())) {
            nMismatchingBases++;
        }
//        Need to handle indels here:
//        locusAndRef.getLocus().getDeletedInRecord()
    }

    /**
     * The suffix that pertains to the implementation of aggregation
     **/
    @Override
    public String getSuffix() {
        return "error";
    }

    /**
     * Returns the metric generated by the observed loci
     **/
    @Override
    public BaseErrorMetric getMetric() {
        return new BaseErrorMetric("", nBases, nMismatchingBases);
    }

    //==================================================================================================================
    // Static Methods:

    //==================================================================================================================
    // Instance Methods:

    //==================================================================================================================
    // Helper Data Types:

}
