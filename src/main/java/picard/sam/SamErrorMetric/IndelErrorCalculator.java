/*
 * The MIT License
 *
 * Copyright (c) 2018 The Broad Institute
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */


package picard.sam.SamErrorMetric;

import htsjdk.samtools.reference.SamLocusAndReferenceIterator;
import htsjdk.samtools.util.SamLocusIterator;

/**
 * A calculator that estimates the error rate of the bases it observes for indels only.
 * Created by jonn on 6/13/19.
 */
public class IndelErrorCalculator extends BaseErrorCalculator {
    /**
     * Total number of inserts
     */
    protected long nInserts;

    /**
     * Total number of deletions
     */
    protected long nDeletions;

    @Override
    public void addBase(final SamLocusIterator.RecordAndOffset recordAndOffset, final SamLocusAndReferenceIterator.SAMLocusAndReference locusAndRef, final CollectSamErrorMetrics.BaseOperation operation) {
        super.addBase(recordAndOffset, locusAndRef, operation);

        if (operation == CollectSamErrorMetrics.BaseOperation.Insertion) {
            nInserts++;
        } else if (operation == CollectSamErrorMetrics.BaseOperation.Deletion) {
            nDeletions++;
        }
    }

    @Override
    public void addBase(final SamLocusIterator.RecordAndOffset recordAndOffset, final SamLocusAndReferenceIterator.SAMLocusAndReference locusAndRef) {
        addBase(recordAndOffset, locusAndRef, CollectSamErrorMetrics.BaseOperation.Match);
    }

    /**
     * The suffix that pertains to the implementation of aggregation
     **/
    @Override
    public String getSuffix() {
        return "indel_error";
    }

    /**
     * Returns the metric generated by the observed loci
     **/
    @Override
    public IndelErrorMetric getMetric() {
        return new IndelErrorMetric("", nBases, nInserts, nDeletions);
    }
}
